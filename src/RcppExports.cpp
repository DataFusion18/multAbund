// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mult_abund_mcmc
List mult_abund_mcmc(const Rcpp::List& data_list, const Rcpp::List& pred_list, const Rcpp::List& initial_vals, const double& phi_beta, const arma::vec& mu_beta, const double& phi_omega, const int& df_omega, const double& a_alpha, const double& b_alpha, const double& phi_sigma, const int& df_sigma, const int& block, const int& burn, const int& iter);
RcppExport SEXP multAbund_mult_abund_mcmc(SEXP data_listSEXP, SEXP pred_listSEXP, SEXP initial_valsSEXP, SEXP phi_betaSEXP, SEXP mu_betaSEXP, SEXP phi_omegaSEXP, SEXP df_omegaSEXP, SEXP a_alphaSEXP, SEXP b_alphaSEXP, SEXP phi_sigmaSEXP, SEXP df_sigmaSEXP, SEXP blockSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pred_list(pred_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_vals(initial_valsSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi_beta(phi_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_beta(mu_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi_omega(phi_omegaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df_omega(df_omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_alpha(a_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_alpha(b_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi_sigma(phi_sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df_sigma(df_sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    __result = Rcpp::wrap(mult_abund_mcmc(data_list, pred_list, initial_vals, phi_beta, mu_beta, phi_omega, df_omega, a_alpha, b_alpha, phi_sigma, df_sigma, block, burn, iter));
    return __result;
END_RCPP
}
// mult_occ_mcmc
List mult_occ_mcmc(const Rcpp::List& data_list, const Rcpp::List& pred_list, const Rcpp::List& initial_vals, const double& phi_beta, const arma::vec& mu_beta, const double& phi_omega, const int& df_omega, const double& a_alpha, const double& b_alpha, const int& block, const int& burn, const int& iter);
RcppExport SEXP multAbund_mult_occ_mcmc(SEXP data_listSEXP, SEXP pred_listSEXP, SEXP initial_valsSEXP, SEXP phi_betaSEXP, SEXP mu_betaSEXP, SEXP phi_omegaSEXP, SEXP df_omegaSEXP, SEXP a_alphaSEXP, SEXP b_alphaSEXP, SEXP blockSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pred_list(pred_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_vals(initial_valsSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi_beta(phi_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_beta(mu_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi_omega(phi_omegaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df_omega(df_omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_alpha(a_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_alpha(b_alphaSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    __result = Rcpp::wrap(mult_occ_mcmc(data_list, pred_list, initial_vals, phi_beta, mu_beta, phi_omega, df_omega, a_alpha, b_alpha, block, burn, iter));
    return __result;
END_RCPP
}
// pois_reg_mcmc
List pois_reg_mcmc(const Rcpp::List& data_list, const Rcpp::List& pred_list, const double& phi_beta, const arma::vec& mu_beta, const double& phi_sigma, const int& df_sigma, const int& block, const int& burn, const int& iter);
RcppExport SEXP multAbund_pois_reg_mcmc(SEXP data_listSEXP, SEXP pred_listSEXP, SEXP phi_betaSEXP, SEXP mu_betaSEXP, SEXP phi_sigmaSEXP, SEXP df_sigmaSEXP, SEXP blockSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pred_list(pred_listSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi_beta(phi_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_beta(mu_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi_sigma(phi_sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type df_sigma(df_sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    __result = Rcpp::wrap(pois_reg_mcmc(data_list, pred_list, phi_beta, mu_beta, phi_sigma, df_sigma, block, burn, iter));
    return __result;
END_RCPP
}
